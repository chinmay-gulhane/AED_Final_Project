/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.wasteManagement.ui.admin;

import edu.neu.wasteManagement.business.Ecosystem;
import edu.neu.wasteManagement.business.role.MarketplaceIntegrator;
import edu.neu.wasteManagement.business.role.PrincipalUser;
import edu.neu.wasteManagement.business.role.RetailUser;
import edu.neu.wasteManagement.business.role.RoleType;
import edu.neu.wasteManagement.business.role.WasteCollector;
import edu.neu.wasteManagement.business.role.WasteCordinator;
import edu.neu.wasteManagement.business.role.WasteSegregator;
import edu.neu.wasteManagement.business.userAccount.UserAccount;
import edu.neu.wasteManagement.utility.Validations;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import edu.neu.wasteManagement.ui.BaseJPanel;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author chinmaygulhane
 */

public class ManageUserJPanel extends BaseJPanel {

    UserAccount selectedUser;
  
    public ManageUserJPanel(Ecosystem system) {
        super(system);
                        System.out.println("In manage User");
        initComponents();
        initSetup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        chkSearchMode = new javax.swing.JCheckBox();
        txtSearchbox = new javax.swing.JTextField();
        lblEmail3 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        chkActive = new javax.swing.JCheckBox();
        lblActive = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblName3 = new javax.swing.JLabel();
        userRoleComboBox = new javax.swing.JComboBox<>();
        btnSaveEnt = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(900, 600));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("STHeiti", 1, 24)); // NOI18N

        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Password", "Role", "IsActive?"
            }
        ));
        tblUser.setAutoscrolls(false);
        jScrollPane2.setViewportView(tblUser);

        btnSearch.setText("Search by user name");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnViewMouseClicked(evt);
            }
        });
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        chkSearchMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSearchModeActionPerformed(evt);
            }
        });

        txtSearchbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchboxActionPerformed(evt);
            }
        });

        lblEmail3.setFont(new java.awt.Font("STHeiti", 1, 36)); // NOI18N
        lblEmail3.setText("Manage Users");

        btnDelete.setText("Delete");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblName.setText("Username : ");

        lblName1.setText("Password :");

        btnUpdate.setText("Update");
        btnUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateMouseClicked(evt);
            }
        });
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        chkActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkActiveActionPerformed(evt);
            }
        });

        lblActive.setText("IsActive ? ");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        txtPassword.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtPasswordPropertyChange(evt);
            }
        });

        lblName3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblName3.setText("Role : ");

        btnSaveEnt.setBackground(new java.awt.Color(0, 0, 0));
        btnSaveEnt.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnSaveEnt.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveEnt.setText("Save");
        btnSaveEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveEntActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnView)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDelete)
                            .addGap(623, 623, 623)
                            .addComponent(chkSearchMode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSearchbox, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSearch))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(358, 358, 358)
                                .addComponent(lblEmail3))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1054, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblName3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(userRoleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblName1)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chkActive)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblActive))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSaveEnt)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(559, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(560, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(721, 721, 721)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lblEmail3)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSearchMode, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearchbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnView)
                        .addComponent(btnDelete)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName)
                    .addComponent(lblName1)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblName3)
                                    .addComponent(userRoleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblActive)
                                .addGap(25, 25, 25)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveEnt)
                            .addComponent(btnUpdate)
                            .addComponent(btnCancel)))
                    .addComponent(chkActive))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(359, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(359, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
          if (chkSearchMode.isSelected()) {
            populateTableSearch(txtSearchbox.getText());
            JOptionPane.showMessageDialog(this, "User found!");
        } else {
            JOptionPane.showMessageDialog(this, "Search-checkbox is disabled");
        } 
    }//GEN-LAST:event_btnSearchActionPerformed

    private void chkSearchModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSearchModeActionPerformed
        // TODO add your handling code here:
        if(chkSearchMode.isSelected())
        btnView.setEnabled(false);
        else
            btnView.setEnabled(true);
    }//GEN-LAST:event_chkSearchModeActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorAdded

    private void txtSearchboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchboxActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewMouseClicked
        // TODO add your handling code here:
        btnView.setEnabled(true);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);

        int selectedRowIndex = tblUser.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a person to View!");
        }
        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        selectedUser = (UserAccount) model.getValueAt(selectedRowIndex, 0);

        txtUsername.setText(selectedUser.getUsername());
        txtPassword.setText(selectedUser.getPassword());
        chkActive.setSelected(selectedUser.isActive());

      
    }//GEN-LAST:event_btnViewMouseClicked

    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
        int selectedRowIndex = tblUser.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete!");
        }
        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        selectedUser = (UserAccount) model.getValueAt(selectedRowIndex, 0);

        system.getUserAccountDir().deleteUserAccount(selectedUser);
        JOptionPane.showMessageDialog(this, "User Deleted!");

        resetPage();
    }//GEN-LAST:event_btnDeleteMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
     
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = tblUser.getSelectedRow();

        if (selectedRowIndex < 0) {

            JOptionPane.showMessageDialog(this, "Please select a row to update");

        } else {

            DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
            selectedUser = (UserAccount) model.getValueAt(selectedRowIndex, 0);

            String userName = txtUsername.getText();
            String password = txtPassword.getText();

            if (!checkValidate()) {
                JOptionPane.showMessageDialog(this, "Please enter valid details");
            } else {
                try {
                    if (!txtPassword.getText().equals(selectedUser.getPassword())) {
                        selectedUser.setPassword(password);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                    return;
                }
                selectedUser.setUsername(userName);
                selectedUser.setActive(chkActive.isSelected());

                JOptionPane.showMessageDialog(this, "Row updated successfully");
                resetPage();
            }
        }
    }//GEN-LAST:event_btnUpdateMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        resetPage();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void chkActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkActiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkActiveActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtPasswordPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtPasswordPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordPropertyChange

    private void btnSaveEntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveEntActionPerformed
        // TODO add your handling code here:
        // Validation if any field is left empty
        RoleType role = mapDisplayNameToRoleType((String) userRoleComboBox.getSelectedItem());
        String userName = txtUsername.getText();
        String password = txtPassword.getText();

        switch (role) {
            case PRINCIPAL_USER:
            {
                try {
                    system.getUserAccountDir().addUserAccount(userName, password,  new PrincipalUser(), true);
                    break;
                } catch (Exception ex) {
                    Logger.getLogger(ManageUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case WASTE_CORDINATOR:
            {
                try {
                    system.getUserAccountDir().addUserAccount(userName, password,  new WasteCordinator(), true);
                    break;
                } catch (Exception ex) {
                    Logger.getLogger(ManageUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case WASTE_SEGREGATOR:
            {
                try {
                    system.getUserAccountDir().addUserAccount(userName, password,  new WasteSegregator(), true);
                    break;
                } catch (Exception ex) {
                    Logger.getLogger(ManageUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case WASTE_COLLECTOR:
            {
                try {
                    system.getUserAccountDir().addUserAccount(userName, password,  new WasteCollector(), true);
                    break;
                } catch (Exception ex) {
                    Logger.getLogger(ManageUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case MARKETPLACE_INTEGRATOR:
            {
                try {
                    system.getUserAccountDir().addUserAccount(userName, password,  new MarketplaceIntegrator(), true);
                    break;
                } catch (Exception ex) {
                    Logger.getLogger(ManageUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            case RETAIL_USER:
            {
                try {
                    system.getUserAccountDir().addUserAccount(userName, password,  new RetailUser(), true);
                    break;
                } catch (Exception ex) {
                    Logger.getLogger(ManageUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            // Add cases for other RoleTypes
            default:
                throw new IllegalArgumentException("Unsupported RoleType: " + role);
        }

        JOptionPane.showMessageDialog(this, "User Information Saved");
        populateTable();
        
    }//GEN-LAST:event_btnSaveEntActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSaveEnt;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JCheckBox chkActive;
    private javax.swing.JCheckBox chkSearchMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblActive;
    private javax.swing.JLabel lblEmail3;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName3;
    private javax.swing.JTable tblUser;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtSearchbox;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JComboBox<String> userRoleComboBox;
    // End of variables declaration//GEN-END:variables

    private void initSetup() {
        populateRoleDropdown();
        populateTable();
    }

    private void populateRoleDropdown() {    
       for (RoleType roleType : RoleType.values()) {
            userRoleComboBox.addItem(mapRoleTypeToDisplayName(roleType));
        }
    }
    
    
    public static String mapRoleTypeToDisplayName(RoleType roleType) {
        switch (roleType) {
            case PRINCIPAL_USER:
                return "Principal User";
            case WASTE_CORDINATOR:
                return "Waste Coordinator";
            case ADMIN:
                return "Admin";
            case WASTE_SEGREGATOR:
                return "Waste Segregator";
            case WASTE_COLLECTOR:
                return "Waste Collector";
            case MARKETPLACE_INTEGRATOR:
                return "Marketplace Integrator";
            case RETAIL_USER:
                return "Retail User";
            default:
                return "Unknown Role";
        }
    }
    
    public static RoleType mapDisplayNameToRoleType(String displayName) {
        switch (displayName) {
            case "Principal User":
                return RoleType.PRINCIPAL_USER;
            case "Waste Coordinator":
                return RoleType.WASTE_CORDINATOR;
            case "Admin":
                return RoleType.ADMIN;
            case "Waste Segregator":
                return RoleType.WASTE_SEGREGATOR;
            case "Waste Collector":
                return RoleType.WASTE_COLLECTOR;
            case "Marketplace Integrator":
                return RoleType.MARKETPLACE_INTEGRATOR;
            case "Retail User":
                return RoleType.RETAIL_USER;
            default:
                return null; // or throw an exception for unknown display names
        }
    }
   
    private void populateTable() {

        DefaultTableModel model = (DefaultTableModel) tblUser.getModel(); //Convert to TableModel to defaultTableModel
        model.setRowCount(0);

        for (UserAccount user : system.getUserAccountDir().getUserAccounts()) {

            if (user.getUsername().equals("ADMIN")) {
                continue;
            }

            //to create lines or row (row is small array of object with 3 members)
            Object[] row = new Object[6];
            row[0] = user;
            row[1] = user.getPassword();
            row[2] = mapRoleTypeToDisplayName(user.getRole().getRoleType());
            row[3] = user.isActive();

            //model will add row
            model.addRow(row);
        }
    }
  

  private void populateTableSearch(String userName) {
       DefaultTableModel model = (DefaultTableModel) tblUser.getModel(); //Convert to TableModel to defaultTableModel
        model.setRowCount(0);

        for (UserAccount user : system.getUserAccountDir().getUserAccounts()) {

            if (!user.getUsername().equals(userName)) {
                continue;
            }

            //to create lines or row (row is small array of object with 3 members)
            Object[] row = new Object[6];
            row[0] = user;
            row[1] = user.getPassword();
            row[2] = mapRoleTypeToDisplayName(user.getRole().getRoleType());
            row[3] = user.isActive();

            //model will add row
            model.addRow(row);
        }
   
}

      public void clearFields(){
        txtUsername.setText("");
        txtPassword.setText("");    
    }

    private void resetPage() {
        populateTable();
        clearFields();
        initialButtonsState();
    }

    private void initialButtonsState() {
         btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }


   public boolean checkValidate(){
        return Validations.isStringValid(txtUsername.getText()) &&
        Validations.isStringValid(txtPassword.getText());
    
    }


}











