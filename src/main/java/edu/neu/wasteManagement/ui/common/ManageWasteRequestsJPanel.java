/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.wasteManagement.ui.common;

import edu.neu.wasteManagement.business.Ecosystem;
import edu.neu.wasteManagement.business.organization.Organization;
import edu.neu.wasteManagement.business.role.RoleType;
import edu.neu.wasteManagement.business.userAccount.UserAccount;
import edu.neu.wasteManagement.business.workQueue.UserWasteCollectionRequest;
import edu.neu.wasteManagement.business.workQueue.WasteProcessingRequest;
import edu.neu.wasteManagement.business.workQueue.WorkRequest;
import edu.neu.wasteManagement.persistence.DB4OUtil;
import edu.neu.wasteManagement.ui.BaseJPanel;
import edu.neu.wasteManagement.utility.Utility;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author ingale.r
 */

public class ManageWasteRequestsJPanel extends BaseJPanel {

   private WorkRequest selectedRequest;
   private Organization org;
   private DB4OUtil db4o;
  
    public ManageWasteRequestsJPanel(Ecosystem system) {
        super(system);
        initComponents();
        this.db4o = DB4OUtil.getInstance();
        initSetup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRequests = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        chkSearchMode = new javax.swing.JCheckBox();
        txtSearchbox = new javax.swing.JTextField();
        lblEmail3 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        btnComplete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        chkProcessingReq = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        cmbAssignee = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        chkCollectionReq = new javax.swing.JCheckBox();
        btnAssign = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 0, 0));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("STHeiti", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));

        tblRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Sender", "Reciever", "Status"
            }
        ));
        tblRequests.setAutoscrolls(false);
        jScrollPane2.setViewportView(tblRequests);

        btnSearch.setText("Search by ID");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnViewMouseClicked(evt);
            }
        });
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        chkSearchMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSearchModeActionPerformed(evt);
            }
        });

        txtSearchbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchboxActionPerformed(evt);
            }
        });

        lblEmail3.setFont(new java.awt.Font("STHeiti", 1, 36)); // NOI18N
        lblEmail3.setText("Manage Waste Requests");

        btnRefresh.setText("Refresh");
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnComplete.setText("Mark as Completed");
        btnComplete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCompleteMouseClicked(evt);
            }
        });
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setText("Collection Request?");

        chkProcessingReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkProcessingReqActionPerformed(evt);
            }
        });

        jLabel3.setText("Processing Request?");

        jLabel4.setText("Assignee:");

        chkCollectionReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCollectionReqActionPerformed(evt);
            }
        });

        btnAssign.setText("Assign");
        btnAssign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAssignMouseClicked(evt);
            }
        });
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(0, 15418, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(lblEmail3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1054, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(chkProcessingReq, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkCollectionReq, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnView)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefresh)
                                .addGap(235, 235, 235)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(cmbAssignee, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(194, 194, 194)
                                .addComponent(chkSearchMode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearchbox, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch)))
                        .addGap(0, 14210, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(616, 616, 616)
                .addComponent(btnAssign)
                .addGap(18, 18, 18)
                .addComponent(btnComplete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(7753, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(7754, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(lblEmail3)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(chkProcessingReq, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(chkCollectionReq, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtSearchbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSearch))
                            .addComponent(chkSearchMode, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbAssignee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnView)
                            .addComponent(btnRefresh))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnComplete)
                    .addComponent(btnCancel)
                    .addComponent(btnAssign))
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addContainerGap(648, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(683, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(683, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
          if (chkSearchMode.isSelected()) {
            populateTableSearch(Integer.parseInt(txtSearchbox.getText()));
            JOptionPane.showMessageDialog(this, "Request found!");
        } else {
            JOptionPane.showMessageDialog(this, "Search-checkbox is disabled");
        } 
    }//GEN-LAST:event_btnSearchActionPerformed

    private void chkSearchModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSearchModeActionPerformed
        // TODO add your handling code here:
        if(chkSearchMode.isSelected())
        btnView.setEnabled(false);
        else
            btnView.setEnabled(true);
    }//GEN-LAST:event_chkSearchModeActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorAdded

    private void txtSearchboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchboxActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblRequests.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select the request to View!");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblRequests.getModel();
        selectedRequest = (WorkRequest) model.getValueAt(selectedRowIndex, 0);
        
        if(canComplete()) btnComplete.setEnabled(true);
        if(canAssign()) btnAssign.setEnabled(true);
        btnRefresh.setEnabled(true);
        txtSearchbox.setEnabled(false);
        populateAssignee();

        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewMouseClicked
        // TODO add your handling code here:
        
    
    }//GEN-LAST:event_btnViewMouseClicked

    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
//             int selectedRowIndex = tblUser.getSelectedRow();
//           if (selectedRowIndex < 0) {
//               JOptionPane.showMessageDialog(this, "Please select a row to delete!");
//           }
//           DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
//           selectedUser = (User) model.getValueAt(selectedRowIndex, 0);
//
//           business.getUserDir().deleteUser(selectedUser);
//           JOptionPane.showMessageDialog(this, "User Deleted!");
//
//           resetPage();
    }//GEN-LAST:event_btnRefreshMouseClicked

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateTable(org.getWorkQueue().getWorkRequestList());
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCompleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCompleteMouseClicked
        // TODO add your handling code here:
//        int selectedRowIndex = tblUser.getSelectedRow();
//
//        if (selectedRowIndex < 0) {
//
//            JOptionPane.showMessageDialog(this, "Please select a row to update");
//
//        } else {
//
//            DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
//            selectedUser = (User) model.getValueAt(selectedRowIndex, 0);
//
//            String userName = txtUsername.getText();
//            String password = txtPassword.getText();
//            String nuId = txtnuId.getText();
//
//            if (!checkValidate()) {
//                JOptionPane.showMessageDialog(this, "Please enter valid details");
//            } else {
//                
//                try{
//                    if(!txtPassword.getText().equals(selectedUser.getPassword()))
//                        selectedUser.setPassword(password);
//                }catch(Exception e){
//                    JOptionPane.showMessageDialog(this, e.getMessage());
//                    return;
//                }
//                selectedUser.setUsername(userName);
//                selectedUser.setActive(chkActive.isSelected());
//                
//                JOptionPane.showMessageDialog(this, "Row updated successfully");
//                resetPage();
//
//            }
//
//        } 
    }//GEN-LAST:event_btnCompleteMouseClicked

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
       selectedRequest.setStatus("Completed");
       JOptionPane.showMessageDialog(this, "Request completed!!");
       initSetup();
      // db4o.storeSystem(system);
    }//GEN-LAST:event_btnCompleteActionPerformed

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        resetPage();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void chkProcessingReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkProcessingReqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkProcessingReqActionPerformed

    private void chkCollectionReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCollectionReqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCollectionReqActionPerformed

    private void btnAssignMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAssignMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignMouseClicked

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        UserAccount reciever = (UserAccount) cmbAssignee.getSelectedItem();
        selectedRequest.setReceiver(reciever);
        selectedRequest.setStatus("Assigned");
        JOptionPane.showMessageDialog(this, "Request assigned!!");
        initSetup();
        
      // db4o.storeSystem(system);
        
    }//GEN-LAST:event_btnAssignActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JCheckBox chkCollectionReq;
    private javax.swing.JCheckBox chkProcessingReq;
    private javax.swing.JCheckBox chkSearchMode;
    private javax.swing.JComboBox<String> cmbAssignee;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblEmail3;
    private javax.swing.JTable tblRequests;
    private javax.swing.JTextField txtSearchbox;
    // End of variables declaration//GEN-END:variables

    private void initSetup() {
        changePageStateByUserRole();
        org = system.getOrganizationByUserAccount(system.getLoggedInUser());
        populateTable(org.getWorkQueue().getWorkRequestList());
    }
    
       
    private void populateTable(List<WorkRequest> requests) {
    
   DefaultTableModel model = (DefaultTableModel) tblRequests.getModel(); //Convert to TableModel to defaultTableModel
        model.setRowCount(0);
        if(org == null){
            JOptionPane.showMessageDialog(this, "Current user is not associated with organization! ");
            return;
        }
        
        for(WorkRequest req : requests ){
            
            if(req instanceof UserWasteCollectionRequest && !isViewCollectionRequest()){
                continue;
            }
            
            if(req instanceof WasteProcessingRequest && !isViewProcessingRequest()){
                continue;
            }

            //to create lines or row (row is small array of object with 3 members)
            Object[] row = new Object[6];
            row[0] = req;
            row[1] = req.getSender();
            row[2] = req.getReceiver();
            row[3] = req.getStatus();

            //model will add row
            model.addRow(row);
        }
    }
  

  private void populateTableSearch(int id) {
       DefaultTableModel model = (DefaultTableModel) tblRequests.getModel(); //Convert to TableModel to defaultTableModel
        model.setRowCount(0);
        
        for(WorkRequest req : system.getOrganizationByUserAccount(system.getLoggedInUser()).getWorkQueue().getWorkRequestList()){

            if (req.getId() != id ) {
                continue;
            }

            //to create lines or row (row is small array of object with 3 members)
            Object[] row = new Object[6];
            row[0] = req;
            row[1] = req.getSender();
            row[2] = req.getReceiver();
            row[3] = req.getStatus();

            //model will add row
            model.addRow(row);
        }
   
}


    private void resetPage() {
        populateTable(org.getWorkQueue().getWorkRequestList());
        initialButtonsState();
        populateAssignee();
    }

    private void initialButtonsState() {
        btnComplete.setEnabled(false);
    }
//
//
//   public boolean checkValidate(){
//        return Validations.isStringValid(txtUsername.getText()) &&
//        Validations.isStringValid(txtPassword.getText()) && 
//        Validations.isStringValid(txtnuId.getText());
//    
//    }

    private boolean isViewCollectionRequest(){
        return chkCollectionReq.isSelected();
    }
   
    private boolean isViewProcessingRequest(){
       return chkProcessingReq.isSelected();
    }
        
    private void emptyAssignee(){
        cmbAssignee.removeAllItems();
    }
     
    private void populateAssignee(){
       //Step 1: Empty assignee comboBox
       emptyAssignee();
       
       //Step 2: Check if View collectionRequest is checked:
       if(isViewCollectionRequest()){
           
           //fetch waste collectors from organizations
           List<UserAccount> collectors = org.getUserAccountDir().findAllUserAccountByRole(RoleType.WASTE_COLLECTOR);
           Utility.addToComboBox(cmbAssignee, collectors);
       }
       
       if(isViewProcessingRequest()){
            List<UserAccount> segregators = org.getUserAccountDir().findAllUserAccountByRole(RoleType.WASTE_SEGREGATOR);
           Utility.addToComboBox(cmbAssignee, segregators);
       }
       
       
    }

    private void changePageStateByUserRole() {
        
        RoleType roleType = system.getLoggedInUser().getRole().getRoleType();
        
        
        switch(roleType){
            case WASTE_CORDINATOR:
                chkProcessingReq.setSelected(true);
                chkCollectionReq.setSelected(true);
                break;
                
            case WASTE_COLLECTOR:
                chkProcessingReq.setSelected(false);
                chkCollectionReq.setSelected(true);
                chkProcessingReq.setEnabled(false);
                chkCollectionReq.setEnabled(false);
                break;
                
             case WASTE_SEGREGATOR:
                chkProcessingReq.setSelected(true);
                chkCollectionReq.setSelected(false);
                chkProcessingReq.setEnabled(false);
                chkCollectionReq.setEnabled(false);
                break;   
        }
            
        btnAssign.setEnabled(false);
        btnComplete.setEnabled(false);
    }
    
    private boolean canAssign(){
        RoleType roleType = system.getLoggedInUser().getRole().getRoleType();
        return roleType.equals(RoleType.WASTE_CORDINATOR) && (selectedRequest.getReceiver() == null);   
    }
    
    private boolean canComplete(){
        RoleType roleType = system.getLoggedInUser().getRole().getRoleType();
        return !roleType.equals(RoleType.WASTE_CORDINATOR) && !(selectedRequest.getStatus().equals("Completed"));  
    }
}











