/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.wasteManagement.ui.marketPlace;

import edu.neu.wasteManagement.business.Ecosystem;
import edu.neu.wasteManagement.business.enterprise.Enterprise;
import edu.neu.wasteManagement.business.organization.MarketplaceOrg;
import edu.neu.wasteManagement.business.organization.Organization;
import edu.neu.wasteManagement.business.products.Order;
import edu.neu.wasteManagement.business.products.Product;
import edu.neu.wasteManagement.business.products.ProductCatalog;
import edu.neu.wasteManagement.ui.BaseJPanel;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author chinmaygulhane
 */
public class BuyProductsJPanel extends BaseJPanel {

    private MarketplaceOrg marketplace;

    /**
     * Creates new form BuyProductsJPanel
     */
    public BuyProductsJPanel(Ecosystem system) {
        super(system);
        initComponents();
        String marketplaceOrgName = "Marketplace Organization";
        Organization marketplaceOrg = system.findOrganizationByName(marketplaceOrgName);

        if (marketplaceOrg instanceof MarketplaceOrg) {
            marketplace = (MarketplaceOrg) marketplaceOrg;
            populateBrowseProductsTable();
        } else {
            System.out.println("The organization is not of type MarketplaceOrg");
        }
    }

    public List<Product> getAllProducts() {
        List<Product> allProducts = new ArrayList<>();

        if (marketplace != null) {
            ProductCatalog catalog = marketplace.getCatalog();
            allProducts = catalog.getProducts();
        }

        return allProducts;
    }

    public void populateBrowseProductsTable() {
        // Get the logged-in user
        String loggedInUsername = system.getLoggedInUser().getUsername();
        DefaultTableModel model = (DefaultTableModel) BrowseProductsTable.getModel();
        JTableHeader header = BrowseProductsTable.getTableHeader();
        header.setFont(new Font("Dialog", Font.BOLD, 14));
        model.setRowCount(0);
        for (Product product : getAllProducts()) {
//            if (!product.getSeller().equals(loggedInUsername)) {
                Object[] row = new Object[4];
                row[0] = product;
                row[1] = product.getPrice();
                row[2] = product.getQuantity();
                row[3] = product.getSeller();
                model.addRow(row);
//            }
        }
    }

    private double calculateFinalPrice(Product product, int quantity) {
        // Assuming you have a getPrice() method in the Product class
        double productPrice = product.getPrice();

        // Calculate the final price based on the product price and quantity
        return productPrice * quantity;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        BrowseProductsTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        btnAdd1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        spinQuantity = new javax.swing.JSpinner();

        setBackground(new java.awt.Color(255, 255, 255));

        BrowseProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Stock Quantity", "Seller"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BrowseProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BrowseProductsTableMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BrowseProductsTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(BrowseProductsTable);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setText("Products");

        btnAdd1.setBackground(new java.awt.Color(0, 0, 0));
        btnAdd1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnAdd1.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd1.setText("Buy");
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1AddProductItemActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel17.setText("Quantity:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnAdd1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd1)
                    .addComponent(spinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(272, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseProductsTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BrowseProductsTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_BrowseProductsTableMouseEntered

    private void BrowseProductsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BrowseProductsTableMousePressed
        // TODO add your handling code here:
        int suppliertablesize = BrowseProductsTable.getRowCount();
        int selectedrow = BrowseProductsTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0 || selectedrow > suppliertablesize - 1) {
            return;
        }
    }//GEN-LAST:event_BrowseProductsTableMousePressed

    private void btnAdd1AddProductItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1AddProductItemActionPerformed
        // TODO add your handling code here:

        int selectedRow = BrowseProductsTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to buy");
            return;
        }

        Product selectedProduct = (Product) BrowseProductsTable.getValueAt(selectedRow, 0);
        int quantity;

        try {
            quantity = Integer.parseInt(spinQuantity.getValue().toString());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid quantity");
            return;
        }

        if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0");
            return;
        }

        // Check if the entered quantity is more than the available quantity
        int availableQuantity = marketplace.getCatalog().getProductQuantity(selectedProduct);
        if (quantity > availableQuantity) {
            JOptionPane.showMessageDialog(this, "Not enough quantity available");
            return;
        }

        // Get the seller information based on the selected product
        String seller = selectedProduct.getSeller();
        System.out.println("selectedProduct: " + selectedProduct);
        System.out.println("selectedProduct: " + selectedProduct.getSeller());

        // Create an Order with buyer, seller, and final price
        Order order = new Order(selectedProduct, system.getLoggedInUser().getUsername(), seller, quantity, calculateFinalPrice(selectedProduct, quantity));

        // Add the order to the product catalog
        marketplace.getCatalog().addOrder(order);

        // Update the product catalog
        marketplace.getCatalog().updateProductQuantityAfterOrder(selectedProduct, quantity);

        // Update the user's order list
        List<Order> userOrders = marketplace.getCatalog().getOrdersByUsername(system.getLoggedInUser().getUsername());
        userOrders.add(order);

        JOptionPane.showMessageDialog(this, "Order Placed Successfully");

        spinQuantity.setValue(0);
        populateBrowseProductsTable();
    }//GEN-LAST:event_btnAdd1AddProductItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BrowseProductsTable;
    private javax.swing.JButton btnAdd1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinQuantity;
    // End of variables declaration//GEN-END:variables
}
